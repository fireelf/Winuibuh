using System;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Imaging;
using System.Runtime.InteropServices;

namespace Puma.Net.Helpers
{
    internal class ImageProcessor
    {
        public static Bitmap ScaleTo(Bitmap sourceBitmap, int scale, bool smooth)
        {
            Bitmap newBitmap;

            if (smooth) newBitmap = ScaleToSmooth(sourceBitmap, new Size(sourceBitmap.Width*scale/100, sourceBitmap.Height*scale/100));
            else newBitmap = ScaleToSharp(sourceBitmap, new Size(sourceBitmap.Width*scale/100, sourceBitmap.Height*scale/100));

            newBitmap.Save("image.bmp",ImageFormat.Bmp);
            return newBitmap;
        }        
        
        public static Bitmap ScaleTo(Bitmap sourceBitmap, Size size, bool smooth)
        {
            if (smooth) return ScaleToSmooth(sourceBitmap, size);
            else return ScaleToSharp(sourceBitmap, size);
        }
        
        private static Bitmap ScaleToSmooth(Bitmap sourceBitmap, Size size)
        {
            Bitmap newBitmap = new Bitmap(size.Width, size.Height, sourceBitmap.PixelFormat);
            Graphics graphics = Graphics.FromImage(newBitmap);
            graphics.InterpolationMode = InterpolationMode.HighQualityBilinear;
            
            try
            {
                graphics.ScaleTransform((float) size.Width/sourceBitmap.Width, (float) size.Height/sourceBitmap.Height);
                graphics.DrawImage(sourceBitmap, new Rectangle(0, 0, sourceBitmap.Width, sourceBitmap.Height),
                                   new Rectangle(0, 0, sourceBitmap.Width, sourceBitmap.Height)
                                   /*new Rectangle(0,0,size.Width, size.Height)*/, GraphicsUnit.Pixel);
            }
            finally
            {
                if (graphics != null) graphics.Dispose();
            }
            return newBitmap;
        }
        
        private static Bitmap ScaleToSharp(Bitmap sourceBitmap, Size size)
        {
            Bitmap newBitmap = new Bitmap(size.Width, size.Height, sourceBitmap.PixelFormat);
            Graphics grSrc = Graphics.FromImage(sourceBitmap);
            Graphics grNew = Graphics.FromImage(newBitmap);
            IntPtr hdcSrc = new IntPtr();
            IntPtr hdcDest = new IntPtr();
            try
            {
                hdcSrc = grSrc.GetHdc();
                hdcDest = grNew.GetHdc();
                IntPtr pOrig = SelectObject(hdcSrc, sourceBitmap.GetHbitmap());
                StretchBlt(hdcDest, 0, 0, size.Width, size.Height, hdcSrc, 0, 0,
                           sourceBitmap.Width, sourceBitmap.Height, TernaryRasterOperations.SRCCOPY);
                SelectObject(hdcSrc, pOrig);
                grNew.ReleaseHdc(hdcDest);
                grSrc.ReleaseHdc(hdcSrc);
            }
            finally
            {
                if (grSrc != null) grSrc.Dispose();
                if (grNew != null) grNew.Dispose();
            }
            return newBitmap;
        }        
        
        private enum TernaryRasterOperations : uint
        {
            SRCCOPY = 0x00CC0020, /* dest = source*/
            SRCPAINT = 0x00EE0086, /* dest = source OR dest*/
            SRCAND = 0x008800C6, /* dest = source AND dest*/
            SRCINVERT = 0x00660046, /* dest = source XOR dest*/
            SRCERASE = 0x00440328, /* dest = source AND (NOT dest )*/
            NOTSRCCOPY = 0x00330008, /* dest = (NOT source)*/
            NOTSRCERASE = 0x001100A6, /* dest = (NOT src) AND (NOT dest) */
            MERGECOPY = 0x00C000CA, /* dest = (source AND pattern)*/
            MERGEPAINT = 0x00BB0226, /* dest = (NOT source) OR dest*/
            PATCOPY = 0x00F00021, /* dest = pattern*/
            PATPAINT = 0x00FB0A09, /* dest = DPSnoo*/
            PATINVERT = 0x005A0049, /* dest = pattern XOR dest*/
            DSTINVERT = 0x00550009, /* dest = (NOT dest)*/
            BLACKNESS = 0x00000042, /* dest = BLACK*/
            WHITENESS = 0x00FF0062, /* dest = WHITE*/
        };

        [DllImport("gdi32.dll")]
        private static extern bool StretchBlt(IntPtr hdcDest, int nXOriginDest, int nYOriginDest,
            int nWidthDest, int nHeightDest,
            IntPtr hdcSrc, int nXOriginSrc, int nYOriginSrc, int nWidthSrc, int nHeightSrc,
            TernaryRasterOperations dwRop);

        [DllImport("gdi32.dll", ExactSpelling = true, SetLastError = true)]
        static extern IntPtr SelectObject(IntPtr hdc, IntPtr hgdiobj);
    }
}
